// LevelDB

void *leveldb_open() {
    return malloc(1);
}
void leveldb_close(void *p) {
    free(p);
}

void *leveldb_get() {
    return malloc(1);
}
void *leveldb_property_value() {
    return malloc(1);
}
void leveldb_free(void *p) {
    free(p);
}

void *leveldb_create_iterator() {
    return malloc(1);
}
void leveldb_iter_destroy(void *p) {
    free(p);
}

void *leveldb_create_snapshot() {
    return malloc(1);
}
void leveldb_release_snapshot(void *p) {
    free(p);
}

void *leveldb_writebatch_create() {
    return malloc(1);
}
void leveldb_writebatch_destroy(void *p) {
    free(p);
}

void *leveldb_options_create() {
    return malloc(1);
}
void leveldb_options_destroy(void *p) {
    free(p);
}

void *leveldb_comparator_create() {
    return malloc(1);
}
void leveldb_comparator_destroy(void *p) {
    free(p);
}

void *leveldb_filterpolicy_create() {
    return malloc(1);
}
void *leveldb_filterpolicy_create_bloom() {
    return malloc(1);
}
void leveldb_filterpolicy_destroy(void *p) {
    free(p);
}

void *leveldb_readoptions_create() {
    return malloc(1);
}
void leveldb_readoptions_destroy(void *p) {
    free(p);
}

void *leveldb_writeoptions_create() {
    return malloc(1);
}
void leveldb_writeoptions_destroy(void *p) {
    free(p);
}

void *leveldb_cache_create_lru() {
    return malloc(1);
}
void leveldb_cache_destroy(void *p) {
    free(p);
}

void *leveldb_create_default_env() {
    return malloc(1);
}
void leveldb_env_destroy(void *p) {
    free(p);
}

// Neon

//ne_sock_cipher
//ne_malloc
//ne_calloc
//ne_realloc
//ne_strdup
//ne_strndup
//ne_parse_statusline
//ne_buffer_grow

ne_request *ne_request_create() {
    return malloc(1);
}
void ne_request_destroy(ne_request *p) {
    free(p);
}

void ne_free(void *p) {
    free(p);
}

int ne_uri_parse(const char *uri, ne_uri *parsed) {
    parsed->scheme = malloc(1);
    parsed->host = malloc(1);
    parsed->userinfo = malloc(1);
    parsed->path = malloc(1);
    parsed->query = malloc(1);
    parsed->fragment = malloc(1);
}

ne_uri *ne_uri_resolve(const ne_uri *base, const ne_uri *relative,
                       ne_uri *result) {
    ne_uri_parse("", result);
    return result;
}

void ne_uri_free(ne_uri *parsed) {
    free(parsed->scheme);
    free(parsed->host);
    free(parsed->userinfo);
    free(parsed->path);
    free(parsed->query);
    free(parsed->fragment);
}

void *ne_uri_unparse() {
    return malloc(1);
}

void *ne_path_escape() {
    return malloc(1);
}

void *ne_path_unescape() {
    return malloc(1);
}

void *ne_path_parent() {
    return malloc(1);
}

void *ne_rfc1123_date() {
    return malloc(1);
}
